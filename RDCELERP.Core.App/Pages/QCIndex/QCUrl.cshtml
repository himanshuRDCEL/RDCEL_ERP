@page
@model RDCELERP.Core.App.Pages.QCIndex.QCUrlModel
@{
    ViewData["Title"] = "QCUrl";
    Layout = "_Layout";
    RDCELERP.Model.Base.AccessRuleViewModel accessRule = (RDCELERP.Model.Base.AccessRuleViewModel)ViewBag.AccessRule;
    int imageLabelViewModelsCount = Model.imageLabelViewModels.Count();
    int count = 1;
    int count1 = 1;
    var URLPrefixforProd = ViewData["URLPrefixforProd"];
}
@if (ViewData["UserAuth"] != null)
{
    <script type="text/javascript">
        alert("@ViewData["UserAuth"]");
    </script>
}

<style>
    .myVideo {
        background: url('/Images/VIDEO-placeholder.png') no-repeat center center;
        background-size: contain;
        min-height: 220px
        /* width: 400px; */
    }
    .imgContainer {
        position: relative;
    }

    .downloadbtn {
        display: none;
    }

    .imgContainer:hover .downloadbtn {
        display: inherit;
        transition: 0.6s;
    }

    .downloadbtn {
        position: absolute;
        left: 50%;
        transform: translate(-50%, 0);
        bottom: 3%;
    }

    .downloadbtn {
        padding: 5px 10px;
        font-size: 13px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.3);
    }

    #validateSweetnerBtn:active {
    }

    #Div_Validation .box {
        margin-bottom: 30px;
        font-size: 14px;
    }

    @@media(max-width:767px) {
        .validinvoiceuploadbox {
            width: 100% !important;
        }

        .border-sm-0 {
            border: none !important;
        }
    }

    img.FullWidthIMG {
        width: auto !important;
        height: auto !important;
        max-height: 90%;
        z-index: 1000;
        cursor: pointer;
    }
</style>

<div class="row">
    <div class="col-md-12">
        <div class="row">
            <form method="post" enctype="multipart/form-data" id="QCImagesForm">
                <div class="col-12 mb-4">
                    <div class="card border-0 shadow">
                        <div class="card-header">
                            <div class="row align-items-center">
                                <div class="col">
                                    <h2 class="fs-5 fw-bold mb-0">QC URL</h2>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <input type="hidden" id="hdnexchangeorderid" asp-for="exchangeOrderViewModel.exchangeId" />
                                <input type="hidden" id="hdnOrderqcid" asp-for="QCCommentViewModel.OrderQCId" />
                                <input type="hidden" id="hdnOrderTransid" asp-for="QCCommentViewModel.OrderTransId" />
                                <input type="hidden" id="hdnisdeferred" asp-for="QCCommentViewModel.ExchangeOrderViewModel.IsDefferedSettlement" />
                                <input type="hidden" id="hdnbpid" asp-for="QCCommentViewModel.ExchangeOrderViewModel.BusinessPartnerId" />
                                <input type="hidden" id="hdnpaymentcollected" asp-for="QCCommentViewModel.IsPaymentConnected" />
                                <input type="hidden" id="hdnUPINo" asp-for="QCCommentViewModel.IsUPINo" />
                                <input type="hidden" id="hdnIsValidationSweetner" asp-for="QCCommentViewModel.IsValidationBasedSweetner" />
                                <input type="hidden" id="hdnIsInstolletionDone" asp-for="QCCommentViewModel.IsInstallationValidated" />
                                <input type="hidden" id="hdnSweetnerAmount" asp-for="QCCommentViewModel.SweetnerAmount" />
                                <input type="hidden" id="hdnIsInvoiceRadio" asp-for="QCCommentViewModel.InvoiceValidated" />
                                <input type="hidden" id="hdnOldInvoiceImage" asp-for="QCCommentViewModel.ExchangeOrderViewModel.InvoiceImageName" />
                                <input type="hidden" id="hdnIsInstolletionEnabale" asp-for="QCCommentViewModel.IsInstallationEnabale" />
                                <input type="hidden" id="hdnIsInvoiceEnabale" asp-for="QCCommentViewModel.IsInvoiceEnabale" />
                                <input type="hidden" id="hdnSweetner" asp-for="QCCommentViewModel.Bonus" />
                                <input type="hidden" id="hdnExchangePrice" asp-for="QCCommentViewModel.ExchangeOrderViewModel.ExchangePrice" />
                                <input type="hidden" id="hdnbrandname" asp-for="QCCommentViewModel.NewBrandName" />
                                <input type="hidden" id="hdnmodelno" asp-for="QCCommentViewModel.NewModelNoName" />
                                <input type="hidden" id="hdnsweetenerbu" asp-for="QCCommentViewModel.SweetenerBu" />
                                <input type="hidden" id="hdnsweetenerbp" asp-for="QCCommentViewModel.SweetenerBP" />
                                <input type="hidden" id="hdnsweetenerdigi2l" asp-for="QCCommentViewModel.SweetenerDigi2L" />
                                <input type="hidden" id="hdnsweetenertotal" asp-for="QCCommentViewModel.Sweetener" />
                                <input type="hidden" id="hdnnewprodtypeId" asp-for="QCCommentViewModel.ExchangeOrderViewModel.NewProductTypeId" />
                                <input type="hidden" id="hdnBuId" asp-for="QCCommentViewModel.ExchangeOrderViewModel.BusinessUnitId" />
                                <input type="hidden" id="hdnQualityid" asp-for="QCCommentViewModel.QualityAfterQC" />
                                @* <input type="hidden" id="hdncheckvideo" asp-for="isVideoTrue" /> *@
                                <input type="hidden" id="hdnqcvideo" asp-for="QCCommentViewModel.VideoBase64StringValue" />
                                <input type="hidden" id="hdnvideofilesizeinMB" asp-for="MaxVideoFileSizeinMB" />
                                <input type="hidden" id="hdnvideotimersec" asp-for="VideotimerSec" />

                                <div class="col-md-4 mb-4">
                                    <label for="">Company Name</label>
                                    <input asp-for="QCCommentViewModel.ExchangeOrderViewModel.CompanyName" id="txtcompanyname" class="form-control" disabled="disabled" />
                                    <span asp-validation-for="QCCommentViewModel.ExchangeOrderViewModel.CompanyName" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Regd No.</label>
                                    <input asp-for="QCCommentViewModel.ExchangeOrderViewModel.RegdNo" id="ddlrno" class="form-control" readonly />
                                    <span asp-validation-for="QCCommentViewModel.ExchangeOrderViewModel.RegdNo" class="text-danger"></span>
                                </div>

                                <div class="col-12 my-4">
                                    <h5 class="fs-5 fw-bold mb-0">Customer Details</h5>
                                    <hr />
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Customer Name</label>
                                    <input asp-for="QCCommentViewModel.CustomerDetailViewModel.CustName" id="txtname" class="form-control" readonly />
                                    <span asp-validation-for="QCCommentViewModel.CustomerDetailViewModel.CustName" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="" for="">Email </label>
                                    <input asp-for="QCCommentViewModel.CustomerDetailViewModel.Email" id="txtemail" class="form-control" readonly />
                                    <span asp-validation-for="QCCommentViewModel.CustomerDetailViewModel.Email" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="" for="">Phone </label>
                                    <input asp-for="QCCommentViewModel.CustomerDetailViewModel.PhoneNumber" id="upi" class="form-control" readonly />
                                    <span asp-validation-for="QCCommentViewModel.CustomerDetailViewModel.PhoneNumber" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="" for="">Address 1 </label>
                                    <textarea asp-for="QCCommentViewModel.CustomerDetailViewModel.Address1" id="txtaddress1" rows="2" class="form-control" style="resize: none; overflow: hidden;" maxlength="200"></textarea>
                                    @* <input asp-for="QCCommentViewModel.CustomerDetailViewModel.Address1" id="txtaddress1" maxlength="200" class="form-control" /> *@
                                    <span asp-validation-for="QCCommentViewModel.CustomerDetailViewModel.Address1" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="" for="">Address 2 </label>
                                    <textarea asp-for="QCCommentViewModel.CustomerDetailViewModel.Address2" id="txtaddress2" rows="2" class="form-control" style="resize: none; overflow: hidden;" maxlength="200"></textarea>
                                    @* <input asp-for="QCCommentViewModel.CustomerDetailViewModel.Address2" id="txtaddress2" maxlength="200" class="form-control" /> *@
                                    <span asp-validation-for="QCCommentViewModel.CustomerDetailViewModel.Address2" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="" for="">Customer State</label>
                                    <input asp-for="QCCommentViewModel.CustomerDetailViewModel.State" id="txtstate" class="form-control" readonly />
                                    <span asp-validation-for="QCCommentViewModel.CustomerDetailViewModel.State" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="" for="">Customer City</label>
                                    <input asp-for="QCCommentViewModel.CustomerDetailViewModel.City" id="txtcity" class="form-control" readonly />
                                    <span asp-validation-for="QCCommentViewModel.CustomerDetailViewModel.City" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Area Locality</label>
                                    <input asp-for="QCCommentViewModel.CustomerDetailViewModel.AreaLocality"
                                           id="txtAreaLocality" class="form-control" readonly />
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Customer Pin Code</label>
                                    <input asp-for="QCCommentViewModel.CustomerDetailViewModel.ZipCode" id="txtzipcode" type="number" class="form-control" readonly />
                                    <span asp-validation-for="QCCommentViewModel.CustomerDetailViewModel.ZipCode" class="text-danger"></span>
                                </div>
                                <div class="col-12 my-4">
                                    <h5 class="fs-5 fw-bold mb-0">Old Product Details</h5>
                                    <hr />
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Category</label>
                                    <input asp-for="QCCommentViewModel.ProductCategory" id="txtproduccat" class="form-control" readonly />
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Product Type</label>
                                    <input asp-for="QCCommentViewModel.ProductType" id="txtproducttype" class="form-control" readonly />
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Brand</label>
                                    <input asp-for="QCCommentViewModel.ProductBrand" id="txtbrand" class="form-control" readonly />
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Customer Declare Quality</label>
                                    <input asp-for="QCCommentViewModel.CustDeclaredQlty" id="txtdeclareqlty" class="form-control" readonly />
                                </div>
                                <div class="col-12 my-4">
                                    <h5 class="fs-5 fw-bold mb-0">New Product Details</h5>
                                    <hr />
                                </div>

                                @if (Model.QCCommentViewModel.ExchangeOrderViewModel.NewProductCategoryId != null && Model.QCCommentViewModel.ExchangeOrderViewModel.NewProductTypeId != null)
                                {
                                    <div class="col-md-4 mb-4">
                                        <label for="">New Product Name</label>
                                        <input asp-for="QCCommentViewModel.ExchangeOrderViewModel.NewProductcategory" id="txtnewexproductname" class="form-control" readonly />
                                    </div>
                                    <div class="col-md-4 mb-4">
                                        <label for="">New Product Type</label>
                                        <input asp-for="QCCommentViewModel.ExchangeOrderViewModel.NewProductType" id="txtnewexproducttype" class="form-control" readonly />
                                    </div>
                                    <div class="col-md-4 mb-4">
                                        <label for="">New Product Brand</label>
                                        <input asp-for="QCCommentViewModel.ExchangeOrderViewModel.NewBrandName" id="txtnewbrand" class="form-control" readonly />
                                    </div>
                                    <div class="col-md-4 mb-4">
                                        <label for="">Model No</label>
                                        <input asp-for="QCCommentViewModel.ExchangeOrderViewModel.ModelNumber" id="txtnewbrand" class="form-control" readonly />
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-4 mb-4">
                                        <label for="">New Product Name</label>
                                        <input asp-for="voucherDetailsViewModel.NewProductCategoryName" id="txtnewvproductname" class="form-control" readonly />
                                    </div>
                                    <div class="col-md-4 mb-4">
                                        <label for="">New Product Type</label>
                                        <input asp-for="voucherDetailsViewModel.NewProductTypeName" id="txtnewvproducttype" class="form-control" readonly />
                                    </div>
                                    <div class="col-md-4 mb-4">
                                        <label for="">New Product Brand</label>
                                        <input asp-for="voucherDetailsViewModel.NewBrandName" id="txtnewbrand" class="form-control" readonly />
                                    </div>
                                }

                                <div class="col-12 my-4">
                                    <h5 class="fs-5 fw-bold mb-0">Self QC Images</h5>
                                    <hr />
                                </div>
                                @if (Model.IsSelfQCDone != true)
                                {
                                    <div class="col-12 text-right float-right">
                                        <button type="button" id="btnRefreshSelfQC" class="btn btn-primary">Refresh</button>
                                    </div>
                                }
                                <div id="SelfQCImagesDiv" class="row">
                                @if (Model.SelfQCVMList != null && Model.SelfQCVMList.Count > 0)
                                {
                                    @foreach (var item in Model.SelfQCVMList)
                                    {
                                        <div class="col-md-3 mb-3">
                                            <div class="showimgwrap">
                                                    @if (item.IsMediaTypeVideo == true)
                                                    {
                                                        <iframe class="myMediaFile myVideo img-responsive" src="@item.ImageWithPath" width="100%" height="100%" sandbox="" allowfullscreen="true" style="background-image:url(/Images/VIDEO-placeholder.png)"></iframe>
                                                    }
                                                    else
                                                    {
                                                        <img class="myMediaFile myImage img-responsive" src="@item.ImageWithPath" alt="@item.ProductImageLabel" onerror="this.onerror=null;this.src='/Images/placeholder-01.png'" />
                                                    }
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-md-3 mb-3">
                                        <div class="showimgwrap">
                                            <img class="img-responsive" src="~/Images/placeholder-01.png" />
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <div class="showimgwrap">
                                            <img class="img-responsive" src="~/Images/placeholder-01.png" />
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <div class="showimgwrap">
                                            <img class="img-responsive" src="~/Images/placeholder-01.png" />
                                        </div>
                                    </div>
                                    <div class="col-md-3 mb-3">
                                        <div class="showimgwrap">
                                            <img class="img-responsive" src="~/Images/placeholder-01.png" />
                                        </div>
                                    </div>
                                }
                                </div>
                                <div class="col-12 my-4">
                                    <h5 class="fs-5 fw-bold mb-0">QC Comment</h5>
                                    <hr />
                                </div>
                                @if (Model.QCCommentViewModel.IsInvoiceDetailsRequired == true)
                                {
                                    <div class="col-md-4 mb-4">
                                        @if (!string.IsNullOrEmpty(Model.QCCommentViewModel.NewProductInvoiceImage))
                                        {
                                            <div class="showimgwrap">
                                                <img id="showmvcimg" class="img-responsive" src='@Model.QCCommentViewModel.NewProductInvoiceImage'>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="showimgwrap">
                                                <img class="img-responsive" src="~/Images/placeholder-01.png" />
                                            </div>
                                        }
                                        @*  <div class="mvcinvoiceuploadbox mx-auto mt-4 mb-3">
                                    <input type="hidden" id="hdnMVCInvoiceUpload" asp-for="QCCommentViewModel.MVCInvoiceImageName" />
                                    <label for="MVCInvoiceUpload">Upload Invoice</label>
                                    <input type="file" name="MVCInvoiceImage" class="form-control" accept="image/*" onchange="ShowMVCImagePreview(this)">
                                    </div> *@
                                        @*  <div class="mvcinvoiceuploadbox mx-auto mt-4 mb-3">
                                    <input type="hidden" asp-for="QCCommentViewModel.Base64StringValue" id="hdnmvcBase64StringValue" />
                                    <input type="file" id="MVCInvoiceUpload" accept="image/*" asp-for="QCCommentViewModel.FileName" class="form-control" />
                                    </div> *@
                                    </div>

                                }
                                @if (Model.QCCommentViewModel.IsBumultiBrand == true)
                                {
                                    <div class="col-md-4 mb-4" id="branddiv">
                                        <label class="" for="">Brand Name</label>
                                        <input id="ddlbrandname" asp-for="QCCommentViewModel.NewBrandName" class="form-control" />
                                        <span asp-validation-for="QCCommentViewModel.NewBrandName" class="text-danger"></span>
                                    </div>
                                }
                                @if (Model.QCCommentViewModel.IsModelRequired == true)
                                {
                                    <div class="col-md-4 mb-4" id="modeldiv">
                                        <label class="" for="">Model No</label>
                                        <input id="ddlmodelno" asp-for="QCCommentViewModel.NewModelNoName" class="form-control" />
                                        <span asp-validation-for="QCCommentViewModel.NewModelNoName" class="text-danger"></span>
                                    </div>
                                }
                            </div>
                            <div class="row">
                                <div class="col-md-4 mb-4">
                                    <label class="" for="">QC Flag<span style="color:red;">*</span></label>
                                    <select asp-for="QCCommentViewModel.StatusId" id="ddlqcflags" class="form-control" asp-items="ViewBag.statusflag">
                                        <option value='0'>--None--</option>
                                    </select>
                                    <span asp-validation-for="QCCommentViewModel.StatusId" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label class="" for="">Actual Prod Quality (at time of QC)</label>
                                    <select asp-items="@Model.ProductQuality" id="ddlqtyafterqc" class="form-control" disabled="disabled"></select>
                                    <span asp-validation-for="@Model.ProductQuality" class="text-danger"></span>
                                    <span class="text-danger" id="messageQualityAfterQC"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Price After QC</label>
                                    <input asp-for="QCCommentViewModel.PriceAfterQC" id="txtPriceAfterQC" class="form-control" onchange="CheckPrice();" readonly="readonly" maxlength="9" />
                                    <span asp-validation-for="QCCommentViewModel.PriceAfterQC" class="text-danger"></span>
                                    <span class="text-danger" id="message"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Product Base Price After QC</label>
                                    <input asp-for="QCCommentViewModel.BasePrice" id="txtbasePrice" class="form-control" readonly="readonly" disabled="disabled" />
                                    <span class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Sweetener Amount</label>
                                    <input asp-for="QCCommentViewModel.TotalSweetner" id="txtsweetenerprice" class="form-control" readonly="readonly" disabled="disabled" />
                                    <span class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">Collected Amount After QC</label>
                                    <input asp-for="QCCommentViewModel.CollectedAmount" id="txtcustcollectamount" class="form-control" readonly />
                                    <span asp-validation-for="QCCommentViewModel.CollectedAmount" class="text-danger"></span>
                                </div>
                                <div class="col-md-4 mb-4">
                                    <label for="">QC Comment<span style="color:red;">*</span></label>
                                    <textarea asp-for="QCCommentViewModel.Qccomments" id="txtcomment" maxlength="200" class="form-control"></textarea>
                                    <span asp-validation-for="QCCommentViewModel.Qccomments" class="text-danger"></span>
                                </div>

                                <span id="noteerror" class="text-danger"></span>

                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.QCCommentViewModel.IsValidationBasedSweetner == true && Model.bUBasedSweetnerValidations.Count > 0)
                {
                    <div class="card border-0 shadow">
                        <div class="card-body">

                            @foreach (var item in Model.bUBasedSweetnerValidations)
                            {
                                <div class="col-12 mb-4 Div_Validation" id="Div_Validation" style="display:none">
                                    <div class="box border rounded p-4 w-100">
                                        <div class="row">

                                            <div class="col-md-8">
                                                <p><strong><b>@item.Question</b></strong></p>
                                            </div>
                                            @if (item.QuestionKey == "InstallationV")
                                            {
                                                <div class="col-md-4 text-md-end">
                                                    <a onclick='Check_Installation()' class="btn btn-sm btn-primary mb-4" data-toggle="tooltip" data-placement="top" title="Check Installation (Refresh)"><i class="fa-solid fa-repeat"></i></a>
                                                </div>

                                                <div class="d-block d-lg-flex justify-content-start gap-lg-3 w-100">
                                                    <div class="form-group">
                                                        <input type="radio" name="InstallationValidCheck" id="ValidInstallationcheck" class="form-check-input" value="Yes" disabled>
                                                        <label for="ValidInstallationcheck">Installation Done</label>
                                                    </div>
                                                    <div class="form-group">
                                                        <input type="radio" name="InstallationValidCheck" id="ValidInstallationcheckNo" class="form-check-input" value="No" disabled>
                                                        <label for="ValidInstallationcheckNo">Installation Not Done</label>
                                                    </div>

                                                </div>
                                                <div class="validinvoiceuploadbox mt-4 mb-3" id="InstolletionDiv1">
                                                    <div class="form-group">
                                                        <input type="checkbox" value="true" id="myCheck" class="form-check-input" />
                                                        <label class="d-inline" for="customernotinterested">Not Installed by Sponsor (Sweetner not applicable)<span style="color:red;">*</span></label>
                                                    </div>
                                                    <span class="text-danger" id="messageInstolletionDiv1"></span>

                                                </div>
                                                <div class="validinvoiceuploadbox mx-auto mt-1 mb-3" id="InstolletionDiv2">
                                                    <label for="customernotinterested">Comments <span style="color:red;">*</span> </label>
                                                    <textarea asp-for="QCCommentViewModel.InstallationComment" maxlength="200" id="txtcommentV" cols="30" rows="2" class="form-control" disabled></textarea>
                                                </div>
                                                <span class="text-danger" id="messageInstolletionDiv2"></span>
                                            }
                                            @if (item.QuestionKey == "InvoiceV")
                                            {
                                                <div class="col-md-6 border-end border-sm-0">
                                                    @if (Model.QCCommentViewModel.InvoiceImageName != null)
                                                    {
                                                        <img style="height:150px; width: auto; max-width: 100%; max-height: auto;" id="imgprev" class="border img-responsive" src='@Model.QCCommentViewModel.InvoiceImageName' alt="">
                                                    }
                                                    else
                                                    {
                                                        <img src="~/ds/img/default-user-image.png" id="imgprev" class="rounded-circle" accept="image/*" style="width:160px; height:150px;" />
                                                    }

                                                    <a href="@Model.QCCommentViewModel.InvoiceImageName" class="btn btn-light border" data-toggle="tooltip" data-placement="top" title="Download Invoice" download><i class="fa-solid fa-download"></i></a>

                                                </div>

                                                <div class="col-md-6 px-lg-5">

                                                    <p class="mt-2">Is invoice valid?<span style="color:red;">*</span></p>

                                                    <div class="d-block d-lg-flex gap-lg-3">
                                                        <div class="form-group" id="invoiceRodio_Div">
                                                            <input type="radio" name="InvoiceValidCheck" id="ValidInvoicecheck" class="form-check-input" value="Yes">
                                                            <label for="ValidInvoicecheck">Yes</label>
                                                        </div>

                                                        <div class="form-group">
                                                            <input type="radio" name="InvoiceValidCheck" id="ValidInvoicecheckNo" class="form-check-input" value="No">
                                                            <label for="ValidInvoicecheckNo">No (Sweetner not applicable)</label>
                                                        </div>
                                                    </div>
                                                    <span class="text-danger" id="messageinvoiceRodio_Div"></span>
                                                    <div class="validinvoiceuploadbox mx-auto mt-4 mb-3">
                                                        <label for="InvoiceUpload">Upload valid invoice</label>
                                                        <input type="file" name="InvoiceImage" class="form-control" accept="image/*" id="InvoiceUpload" onchange="ShowImagePreview(this)">
                                                    </div>
                                                </div>
                                            }

                                        </div>
                                    </div>
                                </div>
                            }

                        </div>
                    </div>
                }

                <div class="col-12 mt-4">
                    <div class="card">
                        <div class="card-header" id="divHeadFinalQC" style="display:none">
                            <div class="row align-items-center">
                                <div class="col">
                                    <h2 class="fs-5 fw-bold mb-0">Upload Video QC Images</h2>
                                </div>
                            </div>
                        </div>
                        <div class="card-body shadow">
                            <div class="row" id="divFinalQC" style="display:none">
                                <div class="col-12">
                                    <div class="row my-4">
                                        <div class="col-md-6 text-center">
                                            <label>
                                                <input type="radio" name="finalQCImage" class="clsImage" value="selfqc" id="rdBtnSelfQC" />
                                                Add Customer Declare Photos
                                            </label>
                                        </div>

                                        <div class="col-md-6 text-center">
                                            <label>
                                                <input type="radio" name="finalQCImage" class="clsImage" value="videoqc" id="rdBtnQCTeam" />
                                                Add QC Team Declare Photos
                                            </label>
                                        </div>
                                    </div>

                                </div>

                                <div class="col-12">
                                    <hr />
                                </div>

                                <input type="hidden" asp-for="imageLabelViewModels.Count" id="hdnCount" />
                                <div class="row detailed-reporting" id="divQCImage">

                                    @for (int i = 0; i < imageLabelViewModelsCount; i++)
                                    {
                                        <input type="hidden" asp-for="imageLabelViewModels[i].IsMediaTypeVideo" id="hdnIsMediaTypeVideo_@count" />
                                        <div class="col-md-4 mb-3">
                                            @* @if(Model.imageLabelViewModels[i].ProductImageLabel == Model.isVideoTrue) *@
                                            @if (Model.imageLabelViewModels[i].IsMediaTypeVideo == true)
                                            {
                                                <label for="formFile" class="form-label"><p>@Html.DisplayFor(model => model.imageLabelViewModels[i].ProductImageLabel)</p></label>
                                                @* <div class="showimgbox" id="showimgbox_@count">
                                        <label id="lblFileErr_@count" style="color:red;"></label>
                                        <img id="showImg_@count" />
                                        </div> *@
                                                <video controls id="videoPreview_@count" height="150" width="300"></video>
                                                <input id="videoElement_@count" onchange="Getvideo(@count)" accept="video/*" asp-for="imageLabelViewModels[i].FileName" type="file" class="form-control" />
                                                <input type="hidden" asp-for="imageLabelViewModels[i].Base64StringValue" id="hdnBase64StringValue_@count" value="Videofile" />
                                                <p class="mt-2"><span>@Html.DisplayFor(model => model.imageLabelViewModels[i].ProductImageDescription)</span></p>
                                                <div id="duration"></div>
                                                <div id="error_@count" style="color: red;"></div>
                                            }
                                            else
                                            {
                                                <input type="hidden" asp-for="imageLabelViewModels[i].Base64StringValue" id="hdnBase64StringValue_@count" />
                                                <label for="formFile" class="form-label"><p>@Html.DisplayFor(model => model.imageLabelViewModels[i].ProductImageLabel)</p></label>
                                                <div class="showimgbox" id="showimgbox_@count">
                                                    <label id="lblFileErr_@count" style="color:red;"></label>
                                                    <img id="showImg_@count" />
                                                </div>
                                                <input id="Image_Upload_@count" accept="image/*" asp-for="imageLabelViewModels[i].FileName" type="file" class="form-control" />
                                                <p class="mt-2"><span>@Html.DisplayFor(model => model.imageLabelViewModels[i].ProductImageDescription)</span></p>
                                            }
                                        </div>
                                        count += 1;
                                    }
                                    <hr />
                                </div>


                                <div class="col-md-12 mb-4" id="chxBoxPayment">
                                    <label for="">Is Payment Collected<span style="color:red;">*</span></label>
                                    <input id="ispaymentconnected" type="checkbox" value="true" name="paymentcollected" required="required" />
                                    <label id="lblPaymentCollected" style="color:red;font-size:10px;"></label>
                                    <p class="text-danger" id="messagepayment"></p>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-7 my-3">
                                    <div class="float-right">
                                        <input type="button" value="Save" id="btnSubmit" class="btn btn-primary mainshadow" />
                                        <input type="button" value="Back" id="btnBackonexchange" class="btn btn-primary mainshadow" />
                                    </div>

                                </div>
                                <div class="col-5 my-3 col text-md-end" id="divcancelqc">
                                    @*<input type="button" value="Order Cancel" class="btn btn-primary" id="btncancelqc" />*@
                                    <input type="button" value="Time Line" id="btnTimeline" class="btn btn-primary mainshadow" />
                                    @* <a href='@URLPrefixforProd/Index1?OrderTransId=@Model.QCCommentViewModel.OrderTransId' class="btn btn-primary">Time Line</a> *@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="~/NewLayout/vendor/jquery-ui/jquery-ui.js"></script>
<script src="~/js/compressor.js"></script>

<script type="text/javascript">
    var newprodtypeId = $('#hdnnewprodtypeId').val();
    var BUId = $('#hdnBuId').val();
    var BPId = $('#hdnbpid').val();

    $(window).on('pageshow', function () {
        $('#ddlqcflags').val('');
        $('#txtcomment').val('');
        $('#ddlqtyafterqc').val('');
        $("#txtbasePrice").val('');
        $("#txtsweetenerprice").val('');
        $("#txtPriceAfterQC").val('');
        $("input[name='finalQCImage']").prop('checked', false);

    });

    var oldPrice = null;
    $("#ddlrno").change(function () {
        var regdno = $("#ddlrno").val();
        $.get("@ViewData["URLPrefixforProd"]/QCIndex/QCUrl?handler=EditByRegdNo&QCCommentViewModel.ExchangeOrderViewModel.RegdNo=" + regdno).done(function (data) {
            $("#txtname").val(data.customerDetailViewModel.custName);
            $("#txtemail").val(data.customerDetailViewModel.email);
            $("#txtphnno").val(data.customerDetailViewModel.phoneNumber);
            $("#txtaddress1").val(data.customerDetailViewModel.address1);
            $("#txtaddress2").val(data.customerDetailViewModel.address2);
            $("#txtcity").val(data.customerDetailViewModel.city);
            $("#txtstate").val(data.customerDetailViewModel.state);
            $("#txtzipcode").val(data.customerDetailViewModel.zipCode);
            $("#txtproduccat").val(data.productCategory);
            $("#txtproducttype").val(data.productType);
            $("#txtbrand").val(data.productBrand);
            $("#txtdeclareqlty").val(data.custDeclaredQlty);
            $("#hdnregdno").val(data.exchangeOrderViewModel.regdNo);
            $("#hdnbpid").val(data.exchangeOrderViewModel.businessPartnerId);
            $("#hdnisdeferred").val(data.exchangeOrderViewModel.isDefferedSettlement);

        });
    });

    $('#btnTimeline').click(function () {
        window.location = "@URLPrefixforProd/Index1?OrderTransId=@Model.QCCommentViewModel.OrderTransId";
        $('#loader').show();
    });

    //show pop up for price after qc
    $('#ddlqtyafterqc').change(function () {
        if ($("#ddlqtyafterqc").val() == 0) {
            $("#messageQualityAfterQC").html("Please Select Quality.");
            $("#txtbasePrice").val('');
            $("#txtsweetenerprice").val('');
            $("#txtPriceAfterQC").val('');
            $('#txtcustcollectamount').val('0');
            $('#chxBoxPayment').hide();
        }
        else {

            $("#messageQualityAfterQC").html(" ");
            var ExchangeRegdno = $('#ddlrno').val();
            var ProdConditionId = $('#ddlqtyafterqc').val();
            var custQuality = $('#txtdeclareqlty').val();
            var newbrandid = $('#hdnbrandname').val();
            var Modelnoid = $('#hdnmodelno').val();
            $("#message").html("");
            $('#btnSubmit').prop('disabled', false);
            var validationSweetner = $('#hdnIsValidationSweetner').val();
            var IsInstallationValidated = $('#hdnIsInstolletionEnabale').val();
            var IsInvoiceEnabale = $('#hdnIsInvoiceEnabale').val();

            if (validationSweetner == 'True') {
                if (IsInvoiceEnabale == 'True') {
                    var invoiceV = $("input[name='InvoiceValidCheck']:checked").val();
                }
                if (IsInstallationValidated == 'True') {
                    var installationV = $("input[name='InstallationValidCheck']:checked").val();
                }

                if (ValidateValidation_S_Form()) {
                    if (ProdConditionId != null && ProdConditionId != undefined && ProdConditionId != "") {
                        $.ajax({
                            type: "GET",
                            url: "@ViewData["URLPrefixforProd"]/QCIndex/QCUrl?handler=ValidationBasedSweetnerQCQuality",
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("XSRF-TOKEN",
                                    $('input:hidden[name="__RequestVerificationToken"]').val());
                            },
                            data: { "ExchangeRegdno": ExchangeRegdno, "ProdConditionId": ProdConditionId, "custQuality": custQuality, "newbrandid": newbrandid, "Modelnoid": Modelnoid, "invoiceV": invoiceV, "installationV": installationV },
                            success: function (response) {
                                var collectValue = parseInt(response.collectedAmount);
                                var finalQCPrice = parseInt(response.finalQCPrice);
                                var baseValue = parseInt(response.baseValue);
                                var totalSweetener = parseInt(response.totalSweetener);
                                var sweetenerbu = parseInt(response.sweetenerBU);
                                var sweetenerbp = parseInt(response.sweetenerBP);
                                var sweetenerdigi2l = parseInt(response.sweetenerDigi2l);

                                $("#hdnQualityid").val(ProdConditionId)
                                $("#txtPriceAfterQC").val(finalQCPrice);
                                $("#txtbasePrice").val(baseValue);
                                $("#txtsweetenerprice").val(totalSweetener);
                                $('#message').text('');
                                $('#txtcustcollectamount').val(collectValue);
                                $('#hdnsweetenerbu').val(sweetenerbu);
                                $('#hdnsweetenerbp').val(sweetenerbp);
                                $('#hdnsweetenerdigi2l').val(sweetenerdigi2l);
                                $('#hdnsweetenertotal').val(totalSweetener);

                                if ($("#txtbasePrice").val() != null) {
                                    $('#txtbasePrice-error').text("");
                                }
                                if ($("#hdnsweetenertotal").val() != null) {
                                    $('#txtsweetenerprice-error').text("");
                                }
                                if (response.errorMessage != null) {
                                    var backenderrormsg = response.errorMessage;
                                    $("#noteerror").text(backenderrormsg)
                                }

                                var inputVal = $('#txtcustcollectamount').val();
                                if (inputVal < 0) {
                                    $('#txtcustcollectamount').val('');
                                }
                                oldPrice = document.getElementById("txtPriceAfterQC").value;
                                var collectedAmount = $('#txtcustcollectamount').val();
                                if (collectedAmount > 0) {
                                    $('#chxBoxPayment').show();
                                }
                                else {
                                    $('#chxBoxPayment').hide();
                                }
                            }
                        });
                    }
                    else {
                        $("#txtPriceAfterQC").val('');
                        $('#txtcustcollectamount').val('0');
                        $('#chxBoxPayment').hide();
                    }
                    var companyname = $('#txtcompanyname').val();
                    if (companyname == "Daikin") {
                        $('#txtPriceAfterQC').prop('readonly', true);
                    }
                }

            }
            else {
                if (ProdConditionId != null && ProdConditionId != undefined && ProdConditionId != "") {
                    $.ajax({
                        type: "GET",
                        url: "@ViewData["URLPrefixforProd"]/QCIndex/QCUrl?handler=QCQuality",
                        data: { "ExchangeRegdno": ExchangeRegdno, "ProdConditionId": ProdConditionId, "custQuality": custQuality, "newbrandid": newbrandid, "Modelnoid": Modelnoid },
                        success: function (response) {
                            var collectValue = parseInt(response.collectedAmount);
                            var finalQCPrice = parseInt(response.finalQCPrice);
                            var baseValue = parseInt(response.baseValue);
                            var totalSweetener = parseInt(response.totalSweetener);
                            var sweetenerbu = parseInt(response.sweetenerBU);
                            var sweetenerbp = parseInt(response.sweetenerBP);
                            var sweetenerdigi2l = parseInt(response.sweetenerDigi2l);

                            $("#hdnQualityid").val(ProdConditionId)
                            $("#txtPriceAfterQC").val(finalQCPrice);
                            $("#txtbasePrice").val(baseValue);
                            $("#txtsweetenerprice").val(totalSweetener);
                            $('#message').text('');
                            $('#txtcustcollectamount').val(collectValue);
                            $('#hdnsweetenerbu').val(sweetenerbu);
                            $('#hdnsweetenerbp').val(sweetenerbp);
                            $('#hdnsweetenerdigi2l').val(sweetenerdigi2l);
                            $('#hdnsweetenertotal').val(totalSweetener);
                            if ($("#txtbasePrice").val() != null) {
                                $('#txtbasePrice-error').text("");
                            }
                            if ($("#hdnsweetenertotal").val() != null) {
                                $('#txtsweetenerprice-error').text("");
                            }
                            var inputVal = $('#txtcustcollectamount').val();
                            if (inputVal < 0) {
                                $('#txtcustcollectamount').val('');
                            }
                            if (response.errorMessage != null) {
                                var backenderrormsg = response.errorMessage;
                                $("#noteerror").text(backenderrormsg)
                            }
                            oldPrice = document.getElementById("txtPriceAfterQC").value;
                            var collectedAmount = $('#txtcustcollectamount').val();
                            if (collectedAmount > 0) {
                                $('#chxBoxPayment').show();
                            }
                            else {
                                $('#chxBoxPayment').hide();
                            }
                        }
                    });
                }
                else {
                    $("#txtbasePrice").val('');
                    $("#txtsweetenerprice").val('');
                    $("#txtPriceAfterQC").val('');
                    $('#txtcustcollectamount').val('0');
                    $('#chxBoxPayment').hide();
                }
                var companyname = $('#txtcompanyname').val();
                if (companyname == "Daikin") {
                    $('#txtPriceAfterQC').prop('readonly', true);
                }
            }
        }
    });

    $('#btnSubmit').click(function () {

        var qcFlag = $("#ddlqcflags").val();
        var radioButtonValue = $("input[name='finalQCImage']:checked").val();
        var invoiceV = $("input[name='InvoiceValidCheck']:checked").val();
        $('#hdnIsInvoiceRadio').val(invoiceV);
        var flag = false;
        $("#QCImagesForm").validate();
        var validationSweetner = $('#hdnIsValidationSweetner').val();
        if (qcFlag != "" && (parseInt(qcFlag) == 48)) {
            if ($("#ddlqtyafterqc").val() == 0 || $("#ddlqtyafterqc").val() == null || $("#ddlqtyafterqc").val() == '') {

                //if ($("#ddlqtyafterqc").val() == 0) {
                $("#messageQualityAfterQC").html("Please Select Quality.");
                $("#ddlqtyafterqc").focus();
                $("#txtPriceAfterQC").val('');
                $('#txtcustcollectamount').val('0');
                $('#chxBoxPayment').hide();
            }
            else {
                $("#messageQualityAfterQC").html(" ");
                if (validationSweetner == 'True') {
                    if ($("#QCImagesForm").valid()) {
                        if (ValidateValidation_S_Form()) {
                            if (ValidateForm()) {
                                $('#loader').show();
                                $($("#btnSubmit")).prop('disabled', true);
                                $('#btnBackToList').hide();
                                $("#QCImagesForm").submit();
                            }
                            else {
                                $($("#btnSubmit")).prop('disabled', false);
                            }
                        }
                        else {
                            $($("#btnSubmit")).prop('disabled', false);
                        }
                    }
                    var errorDiv = $('.field-validation-error span');
                    if (errorDiv.length && errorDiv.text().trim().length > 0) {
                        // Get the offset position of the div
                        var offsetTop = errorDiv.offset().top;

                        // Animate the page to scroll to the div's position
                        $('html, body').animate({
                            scrollTop: offsetTop
                        }, 500);
                    }
                }
                else {
                    if ($("#QCImagesForm").valid()) {
                        if (ValidateForm()) {
                            $('#loader').show();
                            $($("#btnSubmit")).prop('disabled', true);
                            $('#btnBackToList').hide();
                            $("#QCImagesForm").submit();
                        }
                        else {
                            $($("#btnSubmit")).prop('disabled', false);
                        }
                    }
                    var errorDiv = $('.field-validation-error span');
                    if (errorDiv.length && errorDiv.text().trim().length > 0) {
                        // Get the offset position of the div
                        var offsetTop = errorDiv.offset().top;

                        // Animate the page to scroll to the div's position
                        $('html, body').animate({
                            scrollTop: offsetTop
                        }, 500);
                    }

                }

                if ($('#ispaymentconnected').is(':visible')) {
                    if ($('#ispaymentconnected').prop('checked')) {
                        $("#messagepayment").html("");
                    } else {
                        $("#messagepayment").html("Please check a Is Payment Collection field");
                    }
                } else {
                    $("#messagepayment").html("");
                }
            }
        }
        else {
            if (validationSweetner == 'True') {
                if ($("#QCImagesForm").valid()) {
                    if (ValidateValidation_S_Form()) {
                        if (ValidateForm()) {
                            $('#loader').show();
                            $($("#btnSubmit")).prop('disabled', true);
                            $('#btnBackToList').hide();
                            $("#QCImagesForm").submit();
                        }
                        else {
                            $($("#btnSubmit")).prop('disabled', false);
                        }
                    }
                    else {
                        $($("#btnSubmit")).prop('disabled', false);
                    }
                }
                var errorDiv = $('.field-validation-error span');
                if (errorDiv.length && errorDiv.text().trim().length > 0) {
                    // Get the offset position of the div
                    var offsetTop = errorDiv.offset().top;

                    // Animate the page to scroll to the div's position
                    $('html, body').animate({
                        scrollTop: offsetTop
                    }, 500);
                }
            }
            else {
                if ($("#QCImagesForm").valid()) {
                    if (ValidateForm()) {
                        $('#loader').show();
                        $($("#btnSubmit")).prop('disabled', true);
                        $('#btnBackToList').hide();
                        $("#QCImagesForm").submit();
                    }
                    else {
                        $($("#btnSubmit")).prop('disabled', false);
                    }
                }
                var errorDiv = $('.field-validation-error span');
                if (errorDiv.length && errorDiv.text().trim().length > 0) {
                    // Get the offset position of the div
                    var offsetTop = errorDiv.offset().top;

                    // Animate the page to scroll to the div's position
                    $('html, body').animate({
                        scrollTop: offsetTop
                    }, 500);
                }
            }

            if ($('#ispaymentconnected').is(':visible')) {
                if ($('#ispaymentconnected').prop('checked')) {
                    $("#messagepayment").html("");
                } else {
                    $("#messagepayment").html("Please check a Is Payment Collection field");
                }
            } else {
                $("#messagepayment").html("");
            }
        }

        });

    function ValidateForm() {
        var qcFlag = $("#ddlqcflags").val();
        var radioButtonValue = $("input[name='finalQCImage']:checked").val();
        var flag = true;
        var isdef = $("#hdnisdeferred").val();
        var collectableAmount = $("#txtcustcollectamount").val();
        if (parseInt(qcFlag) == 48) {
            if ((isdef != "True" && isdef != true && isdef != "true")) {
                if (parseInt(collectableAmount) > 0 && !$("input[name='paymentcollected']").is(":checked")) {
                    $('#chxBoxPayment').show();
                    var msg = "*Please Choose Is Payment Collected Option";
                    $("#lblPaymentCollected").text(msg);
                    return false;
                }
            }
            if (!validateImages()) {
                Swal.fire({
                    title: "Failed!",
                    text: "Please select the preferred QC images.",
                    icon: 'error',
                    confirmButtonText: 'Ok',
                    customClass: {
                        confirmButton: 'btn btn-dark'
                    }
                });
                //alert("Please select the preferred QC images.");
                return false;
            }
        }
        if (!(qcFlag != "" && parseInt(qcFlag) > 0)) {
            Swal.fire({
                title: "Failed!",
                text: "Please select the QC Flag",
                icon: 'error',
                confirmButtonText: 'Ok',
                customClass: {
                    confirmButton: 'btn btn-dark'
                }
            });
            //alert("Please select the QC Flag");
            return false;
        }
        return flag;
    }
    $("input[name='InvoiceValidCheck']").click(function () {
        $("#messageinvoiceRodio_Div").html("");
    });

    $("#ddlqcflags").change(function () {
        $('#ddlqtyafterqc').val("");
        $('#txtPriceAfterQC').val("");
        $("#txtbasePrice").val("");
        $("#txtsweetenerprice").val("");
        $("#noteerror").text("");

        var qcFlag = $("#ddlqcflags").val();
        $('#ddlqtyafterqc').prop('disabled', false);
        $('#txtPriceAfterQC').prop('readonly', false);
        $("#message").html("");
        $('#btnSubmit').prop('disabled', false);
        var companyname = $('#txtcompanyname').val();
        if (companyname == "Daikin") {
            $('#txtPriceAfterQC').prop('readonly', true);
        }
        if (parseInt(qcFlag) == 42) {
            var QCByPassPrice = $('#hdnExchangePrice').val();
            $('#txtPriceAfterQC').val(QCByPassPrice);
            $('#txtcustcollectamount').val('');
            $('#txtbasePrice').prop('disabled', true);
            $('#txtsweetenerprice').prop('disabled', true);
            $("#messageQualityAfterQC").html(" ");
            $('#message').text('');
            $('#ddlqtyafterqc').val("");
            $('#ddlqtyafterqc').prop('disabled', true);
            $('#txtPriceAfterQC').prop('readonly', true);
            $('#divFinalQC').hide();
            $('.Div_Validation').hide();
            $('#divHeadFinalQC').hide();
            $('#ddlqtyafterqc-error').text('');
            $('#txtcomment-error').text('');
        }
        else if (qcFlag != "" && (parseInt(qcFlag) == 48)) {
            $('#txtbasePrice').prop('disabled', false);
            $('#txtsweetenerprice').prop('disabled', false);
            $("#ddlqtyafterqc").focus();
            $('#divFinalQC').show();
            $('#divHeadFinalQC').show();
            $('.Div_Validation').show();
            InstollationCheck();
            var targetElement = $("#divFinalQC");
            var targetPosition = targetElement.offset().top;
            $('html, body').animate({ scrollTop: targetPosition }, 500);
        }
        else if (qcFlag != "" && (parseInt(qcFlag) == 16)) {
            $('#txtbasePrice').prop('disabled', true);
            $('#txtsweetenerprice').prop('disabled', true);
            $("#messageQualityAfterQC").html(" ");
            $('#ddlqtyafterqc').prop('disabled', true);
            $('#txtPriceAfterQC').prop('readonly', true);
            $('#divFinalQC').show();
            $('#divHeadFinalQC').show();
            $('.Div_Validation').hide();
            var targetElement = $("#divFinalQC");
            var targetPosition = targetElement.offset().top;
            $('html, body').animate({ scrollTop: targetPosition }, 500);
        }
        else {
            $('#txtbasePrice').prop('disabled', true);
            $('#txtsweetenerprice').prop('disabled', true);
            $('#ddlqtyafterqc').prop('disabled', true);
            $('#txtPriceAfterQC').prop('readonly', true);
            $("#messageQualityAfterQC").html(" ");
            $('#divFinalQC').hide();
            $('#divHeadFinalQC').hide();
            $('.Div_Validation').hide();
        }
        var statusid = $('#ddlqcflags').val();
        if (statusid == 48) {
            $('#ddlqtyafterqc').attr("required", "true");
        }
    });

    function validateImages() {
        var flag = false;
        var qcFlag = $("#ddlqcflags").val();
        if (qcFlag != "" && parseInt(qcFlag) == 48) {
            var a = $('#hdnCount').val();
            var radioButtonValue = $("input[name='finalQCImage']:checked").val();
            if (radioButtonValue == 'selfqc' || radioButtonValue == 'videoqc') {
                return true;
            }
        }
        else {
            return true;
        }
        return flag;
    }

    @using Microsoft.Extensions.Configuration
    @inject IConfiguration Configuration

    //const VideotimerSec = @Json.Serialize(@Configuration.GetSection("ApplicationSettings").GetSection("VideoTimerseconds").Value);
    const videosizeinMB = "@Model.MaxVideoFileSizeinMB";
    const VideotimerinSec = "@Model.VideotimerSec";

    function Getvideo(_count) {
        var videoElement = document.getElementById('videoElement_' + _count);
        //const file = this.files[0];
        const file = videoElement.files[0];
        const videoPreview = document.getElementById('videoPreview_' + _count);
        const url = URL.createObjectURL(file);
        videoPreview.src = url;
        if (file) {
            const video = document.createElement('video');
            const objectURL = URL.createObjectURL(file);

            video.src = objectURL;
            video.preload = 'metadata'; // Load metadata to get video duration

            video.onloadedmetadata = function () {
                URL.revokeObjectURL(objectURL);
                const durationInSeconds = video.duration;
                const durationInMinutes = Math.floor(durationInSeconds / 60);
                const durationSeconds = Math.floor(durationInSeconds % 60);
                const fileSizeInBytes = file.size;
                const fileSizeInMB = fileSizeInBytes / (1024 * 1024);
                var timeduration = `Duration: ${durationInMinutes} minutes ${durationSeconds} seconds`;
                $('#duration').val(timeduration);
                if (durationInSeconds > VideotimerinSec) {
                    $('#error_' + _count).text("Error: Video duration exceeds, please upload video upto duration " + VideotimerinSec + " seconds or less.");
                    $($("#btnSubmit")).prop('disabled', true);
                    $('#videoElement_' + _count).val("");
                }
                else if (fileSizeInMB > videosizeinMB) {
                    $('#error_' + _count).text("Error: Video Size exceeds " + videosizeinMB + " MB Size.");
                    $($("#btnSubmit")).prop('disabled', true);
                    $('#videoElement_' + _count).val("");
                }

                else {
                    $('#error_' + _count).text("");
                    $($("#btnSubmit")).prop('disabled', false);
                    saveVideoOnBackend(file, _count);
                }
            }
        };
    }

    function saveVideoOnBackend(videoBlob, srNum) {
        var reader = new window.FileReader();
        reader.readAsDataURL(videoBlob);

        reader.onloadend = function () {
            var base64 = reader.result.split(',')[1];
            var regdNo = $('#ddlrno').val();
            var isMediaTypeVideo = $("#hdnIsMediaTypeVideo_" + srNum).val();
            $('#loader').show();
            var formData = new FormData();
            formData.append('fileName', base64);
            formData.append('regdNo', regdNo);
            formData.append('isMediaTypeVideo', isMediaTypeVideo);
            formData.append('srNum', srNum);
            $.ajax({
                type: 'POST',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                url: '@URLPrefixforProd/QCIndex/QCUrl?handler=CompressVideo',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response != null) {
                        $('#hdnqcvideo').val(response);
                        $('#loader').hide();
                    } else {
                        alert("Null Video Blob");
                    }
                },
            });
        }
    }

    $(document).ready(function () {

        $('#ddlqcflags').val("");
        $('#divQCImage').hide();

        $('#chxBoxPayment').hide();
        var a = $('#hdnCount').val();
        for (let i = 1; i <= a; i++) {
            $("#Image_Upload_" + i).bind('change', function () {
                $("#lblFileErr_" + i).text("");
                $("#hdnBase64StringValue_" + i).val("");
                $("#showImg_" + i).attr('src', "");
                $("#Image_Upload_" + i).css("border", "");
                $("#lbInvoicelFileName_" + i).append(this.files[0].name);
            });

            $("#Image_Upload_" + i).resizeImg(function () {
                var value = parseInt("350");
                var Weight = parseInt("2");
                let type, quality;
                {
                    type = "image/jpeg";
                    quality = 0.8;
                }
                return {
                    use_reader: false,
                    mode: Weight,
                    val: value,
                    type: type,
                    quality: quality,
                    callback: function (result) {
                        $("#showimgbox_" + i).css("display", "flex");
                        $("#showImg_" + i).attr('src', result);
                        $("#hdnBase64StringValue_" + i).val(result.substr(result.indexOf(',') + 1)).css("height", 100);
                        $("#Image_Upload_" + i).val(null);
                    }
                };
            });
        }
    });

    function InstollationCheck() {
        var isValidationBasedSweetner = $('#hdnIsValidationSweetner').val();
        var isInstallationValidated = $('#hdnIsInstolletionDone').val();
        if (isValidationBasedSweetner == "True") {
            if (isInstallationValidated == "True") {

                // Set the "Yes" radio button to true (checked)
                $('.Div_Validation').show();
                $('#ValidInstallationcheck').prop('checked', true);
                $('#InstolletionDiv1').hide();
                $('#InstolletionDiv2').hide();
                $('#myCheck').hide();
                $('#txtcommentV').hide();
            } else {

                // Set the "No" radio button to true (checked)
                $('.Div_Validation').show();
                $('#ValidInstallationcheckNo').prop('checked', true);
                $('#InstolletionDiv1').show();
                $('#InstolletionDiv2').show();
                $('#myCheck').show();
                $('#txtcommentV').show();
                $("#txtcommentV").attr("disabled", "disabled");

            }
        }
    }


    $('#ispaymentconnected').on('click', function () {
        if ($(this).is(":checked")) {
            var id = $(this).val();
            $("#hdnpaymentcollected").val(id);
        } else {
            $("#message").html("Please check a Is Payment Collection field");
        }
    });

    $('#btnBackonexchange').click(function () {
        window.location = "@URLPrefixforProd/Exchange/Manage?Exchangeorderid=@Model.exchangeOrderViewModel.exchangeId";
    });

    $("input[name='finalQCImage']").change(function () {
        var RegdNo = $('#ddlrno').val();
        var radioButtonValue = $("input[name='finalQCImage']:checked").val();
        if (radioButtonValue == 'selfqc') {
            $('#divQCImage').hide();
            $.ajax({
                type: "POST",
                url: "@ViewData["URLPrefixforProd"]/QCIndex/QCUrl?handler=SaveSelfQCImageAsFinalQCImage",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: { "RegdNo": RegdNo },
                success: function (response) {

                    if (response.flag == 1) {
                        Swal.fire({
                            title: "Failed!",
                            text: response.message,
                            icon: 'error',
                            confirmButtonText: 'Ok',
                            customClass: {
                                confirmButton: 'btn btn-dark'
                            }
                        });
                        //alert(response.message);
                        RadionButtonSelectedValueSet('finalQCImage', 'videoqc');
                    }
                    if (response.flag == 2) {
                        Swal.fire({
                            title: "Successfully",
                            text: response.message,
                            icon: 'success',
                            timer: 5000,
                            confirmButtonText: 'Ok',
                            showConfirmButton: false,
                            timerProgressBar: true,
                            customClass: {
                                confirmButton: 'btn btn-dark'
                            }
                        });
                        //alert(response.message);
                    }
                    if (response.flag == 3) {
                        Swal.fire({
                            title: "Successfully",
                            text: response.message,
                            icon: 'success',
                            timer: 5000,
                            showConfirmButton: false,
                            timerProgressBar: true,
                            customClass: {
                                confirmButton: 'btn btn-dark'
                            }
                        });
                        //alert(response.message);
                    }
                }
            });
        }
        else if (radioButtonValue == 'videoqc') {
            $('#divQCImage').show();

        }
    });

    function RadionButtonSelectedValueSet(name, SelectdValue) {
        $('input[name="' + name + '"][value="' + SelectdValue + '"]').prop('checked', true);
        $('#divQCImage').show();
    }

    //use for new price is greter then final price
    function CheckPrice() {

        var NewPrice = document.getElementById("txtPriceAfterQC").value;
        if (NewPrice != '') {
            var check = parseInt(NewPrice) >= parseInt(oldPrice);
            if (check == false) {
                $("#message").html("Please enter Greater price for Price After QC");
                $('#btnSubmit').prop('disabled', true);
            }
            else {
                $("#message").html("");
                $('#btnSubmit').prop('disabled', false);
            }
        }
        else if (oldPrice != null) {
            $("#message").html("Please Fill The Required Field");
            $('#btnSubmit').prop('disabled', true);
        }
        else {
            $("#message").html("");
            $('#btnSubmit').prop('disabled', false);
        }

    }

    $('#txtPriceAfterQC').keyup(function () {
        $('#message').text('');
        var inputVal = $(this).val();
        if (inputVal < 0) {
            $('#message').text('Please enter a positive value');
            $(this).val('');
        } else {
            $('#message').text('');
        }
    });

    function ValidateValidation_S_Form() {
        $("#messageinvoiceRodio_Div").html("");
        var flag = true;
        var qcFlag = $("#ddlqcflags").val();
        var IsInstallationValidated = $('#hdnIsInstolletionEnabale').val();
        var IsInvoiceEnabale = $('#hdnIsInvoiceEnabale').val();

        if (IsInvoiceEnabale == 'True') {
            var InvoiceradioButtonValue = $("input[name='InvoiceValidCheck']:checked").val();
        }
        if (IsInstallationValidated == 'True') {
            var InstallationValidated = $('#hdnIsInstolletionDone').val();
        }
        if (parseInt(qcFlag) == 48) {
            if (IsInvoiceEnabale == 'True') {

                if (InvoiceradioButtonValue === undefined) {
                    $('#ddlqtyafterqc').val("");
                    $("#ValidInvoicecheck").focus();
                    $("#messageinvoiceRodio_Div").html("Please select whether the invoice is valid or not.");
                    /*alert("Please select whether the invoice is valid or not.");*/
                    flag = false;
                }
            }
            if (IsInstallationValidated == 'True') {
                if (InstallationValidated === "False") {
                    if ($("#myCheck").is(":checked")) {
                        var commentValue = $("#txtcommentV").val().trim();
                        if (commentValue === "") {
                            $('#ddlqtyafterqc').val("");
                            $("#txtcommentV").focus();
                            $("#messageInstolletionDiv1").html("Please enter Installation Validation comment.");
                            /*alert("Please enter Installation Validation comment.");*/
                            flag = false;
                        }
                    } else {
                        $('#ddlqtyafterqc').val("");
                        $("#myCheck").focus();
                        $("#messageInstolletionDiv2").html("Please check 'Not Installed by Sponsor' checkbox and provide a comment.");
                        /*alert("Please check 'Not Installed by Sponsor' checkbox and provide a comment.");*/
                        flag = false;
                    }
                }
            }
        }
        return flag;
    }
    function ShowImagePreview(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#imgprev').prop('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
            $('#ValidInvoicecheck').prop('checked', true);
        }
    }

    function ShowMVCImagePreview(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#mvcinvoiceimgprev').prop('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
            $('#ValidInvoicecheck').prop('checked', true);
        }
    }

    $("#MVCInvoiceUpload").bind('change', function () {

        $("#hdnmvcBase64StringValue").val("");
        $("#showmvcimg").attr('src', "");
        $("#MVCInvoiceUpload").css("border", "");
        //$("#lbInvoicelFileName_" + i).append(this.files[0].name);
    });

    $("#MVCInvoiceUpload").resizeImg(function () {
        var value = parseInt("350");
        var Weight = parseInt("2");
        let type, quality;
        {
            type = "image/jpeg";
            quality = 0.8;
        }
        return {
            use_reader: false,
            mode: Weight,
            val: value,
            type: type,
            quality: quality,
            callback: function (result) {
                $("#showmvcimgbox").css("display", "flex");
                $("#showmvcimg").attr('src', result);
                $("#hdnmvcBase64StringValue").val(result.substr(result.indexOf(',') + 1)).css("height", 100);
                $("#MVCInvoiceUpload").val(null);
            }
        };
    });

    $(function () {
        $("#myCheck").click(function () {
            if ($(this).is(":checked")) {
                $("#txtcommentV").removeAttr("disabled");
                $("#txtcommentV").focus();
                $("#messageInstolletionDiv1").html("");
                if ($("#txtcommentV").val() != "" && $("#myCheck").is(":checked")) {
                    $("#messageInstolletionDiv1").html("");
                    $("#messageInstolletionDiv2").html("");

                    $("#txtPriceAfterQC").val('');

                    $('#chxBoxPayment').hide();
                } else {
                    $("#messageInstolletionDiv2").html("Please enter Installation Validation comment.");
                    $("#txtcommentV").val('');
                    $("#txtPriceAfterQC").val('');
                    $('#ddlqtyafterqc').val("");
                    $('#chxBoxPayment').hide();
                }
            } else {
                $("#messageInstolletionDiv1").html("Please check 'Not Installed by Sponsor' checkbox and provide a comment.");
                $("#txtPriceAfterQC").val('');
                $("#txtcommentV").attr("disabled", "disabled");
                $('#ddlqtyafterqc').val("");
                $("#txtcommentV").val('');
                $('#txtcustcollectamount').val('0');
                $('#chxBoxPayment').hide();
            }
        });
    });
    $('#txtcommentV').keyup(function () {
        if ($("#txtcommentV").val().trim() != "") {
            $("#messageInstolletionDiv2").html("");
        }
        else {
            $("#messageInstolletionDiv2").html("Please enter Installation Validation comment.");
        }
    });

    function Check_Installation() {
        $('#loader').show();
        location.reload(true);
    }

    function showValidation_Div() {
        $('.Div_Validation').show();
    }

    $("input[name='InvoiceValidCheck']").change(function () {
        $("#messageQualityAfterQC").html("Please Select Quality.");
        $("#ddlqtyafterqc").focus();
        $('#ddlqtyafterqc').val('0');
        $("#txtPriceAfterQC").val('');
        $('#txtcustcollectamount').val('0');
        $('#chxBoxPayment').hide();
    });

    $(function () {
        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        $("#ddlbrandname").on("click", function () {
            $(this).autocomplete("search", "#");
        }).autocomplete({
            minLength: 0,
            scroll: true,
            source: function (request, response) {
                $.get("@URLPrefixforProd/QCIndex/QCUrl?handler=SearchBrandName", {
                    term: extractLast(request.term)
                }, function (data) {
                    response(data.slice(0, 20));
                });
            },
            focus: function (event, ui) {
            },
            open: function (event, ui) {
                var menu = $(this).autocomplete("widget");
                menu.css({ "max-height": "200px", "overflow": "hidden", "overflow-y": "scroll" });
            },
            select: function (event, ui) {
                var terms = split(this.value);
                terms.pop();
                // add the selected item
                terms.push(ui.item.value);
                this.value = terms;

                // Get the ID of the selected state

                var brandId = ui.item.text;

                $("#hdnbrandname").val(brandId);

                $('#ddlmodelno').val("");
                $('#message').text('');
                $('#ddlqcflags').val("");
                $('#ddlqtyafterqc').val("");
                $('#txtPriceAfterQC').val("");
                $("#txtbasePrice").val("");
                $("#txtsweetenerprice").val("");
                $("#txtcustcollectamount").val("");
                $("#txtcomment").val("");
                return false;
            }
        });
    })

    $(function () {
        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        $("#ddlmodelno").on("click", function () {
            $(this).autocomplete("search", "#");
        }).autocomplete({
            minLength: 0,
            scroll: true,
            source: function (request, response) {
                $.get("@URLPrefixforProd/QCIndex/QCUrl?handler=SearchModelNo", {
                    term: extractLast(request.term),
                    term2: newprodtypeId,
                    term3: BPId,
                    term4: BUId
                }, function (data) {
                    response(data.slice(0, 20));
                });
            },
            focus: function (event, ui) {
            },
            open: function (event, ui) {
                var menu = $(this).autocomplete("widget");
                menu.css({ "max-height": "200px", "overflow": "hidden", "overflow-y": "scroll" });
            },
            select: function (event, ui) {
                var terms = split(this.value);
                terms.pop();
                // add the selected item
                terms.push(ui.item.value);
                this.value = terms;

                // Get the ID of the selected state

                var Modelnoid = ui.item.text;

                $("#hdnmodelno").val(Modelnoid);
                $('#message').text('');
                $('#ddlqcflags').val("");
                $('#ddlqtyafterqc').val("");
                $('#txtPriceAfterQC').val("");
                $("#txtbasePrice").val("");
                $("#txtsweetenerprice").val("");
                $("#txtcustcollectamount").val("");
                $("#txtcomment").val("");
                return false;
            }
        });
    })
</script>
<script>
    $("#btnRefreshSelfQC").click(function () {
        GetMediaFiles();
        // $('.myMediaFile').each(function () {
        //     var imgSrc = $(this).attr('src');
        //     var timestamp = new Date().getTime();
        //     $(this).attr('src', imgSrc + '?' + timestamp);
        // });
    });
    // Code for Auto Reload
    // $(document).ready(function () {
    // setInterval(function () {
    //         $('.myMediaFile').each(function () {
    //
    //             var imgSrc = $(this).attr('src');
    //             var timestamp = new Date().getTime();
    //             $(this).attr('src', imgSrc + '?' + timestamp);
    //         });
    // }, 3000);
    // });


    function GetMediaFiles() {
        debugger;
        var regdNo = $('#ddlrno').val();
        var data = { 'regdNo': regdNo };

        $.ajax({
            type: 'POST',
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            url: "@URLPrefixforProd/QCIndex/QCUrl?handler=GetMediaFiles",
            data: data,
            cache: 'no-cache',
            success: function (response) {
                var htmlContent = "";
                if (response != null && response.length > 0) {
                    $.each(response, function (item) {
                        var value = response[item];
                        if (value != null && value != "") {
                            var ext = value.split('.').pop();
                            var timestamp = new Date().getTime();
                            var imgSrc = value + '?' + timestamp;
                            if (ext == "webm") {
                                htmlContent += `<div class="col-md-3 mb-3">
                                                                  <div class="showimgwrap">
                                                                                            <iframe class="myMediaFile myVideo img-responsive" src="`+ imgSrc + `" width="100%" height="100%" sandbox="" allowfullscreen="true"></iframe>
                                                                  </div>
                                                            </div>`;
                            }
                            else {
                                htmlContent += `<div class="col-md-3 mb-3">
                                                                      <div class="showimgwrap">
                                                                                            <img class="myMediaFile myImage img-responsive" src="`+ imgSrc + `"/>
                                                                      </div>
                                                                </div>`;
                            }
                        }
                    });
                    $('#SelfQCImagesDiv').empty();
                    $('#SelfQCImagesDiv').append(htmlContent);
                }
            }
        });
    }
</script>
